options:
  parameters:
    author: Jon Kraft
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: test
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: SimpleGRCwPYADI
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: LOfreq
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: int(0.1e9)
    step: int(0.1e9)
    stop: int(6e9)
    value: int(2e9)
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [496, 8.0]
    rotation: 0
    state: enabled
- name: rx_gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '70'
    value: '30'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 8.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 10e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 8.0]
    rotation: 0
    state: enabled
- name: size_fft
  id: variable
  parameters:
    comment: ''
    value: '32768'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 80.0]
    rotation: 0
    state: enabled
- name: tx_gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '-70'
    step: '1'
    stop: '0'
    value: '-30'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [384, 8.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    LOfreq: int(LOfreq)
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      import time\nfrom gnuradio import gr\nimport adi  # import pyadi-iio library\n\
      from scipy import signal\nfrom scipy.signal import chirp, spectrogram, hilbert\n\
      \nclass blk(gr.sync_block):\n    def __init__(self, samp_rate=1e6, rx_gain=20,\
      \ tx_gain=-30, LOfreq=2e9):\n\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Pluto Python Control Block',   # will show up in\
      \ GRC\n            in_sig=[],\n            out_sig=[np.complex64]\n        )\n\
      \        self.set_min_output_buffer(4096*16)\n        self.samp_rate = samp_rate\n\
      \        self.rx_gain = rx_gain\n        self.tx_gain = tx_gain\n        self.LOfreq\
      \ = LOfreq\n        self.initSDR = 0\n        \n    def work(self, input_items,\
      \ output_items):\n        if self.initSDR == 0:\n            # %% Setup SDR\n\
      \            sdr_ip = \"ip:192.168.2.1\"   # default Pluto IP address\n    \
      \        self.sdr = adi.ad9361(uri=sdr_ip)\n            # Configure Rx\n   \
      \         self.sdr.sample_rate = int(self.samp_rate)\n            self.samp_rate\
      \ = int(self.sdr.sample_rate)\n            self.sdr.rx_lo = int(self.LOfreq)\
      \   \n            self.sdr.rx_enabled_channels = [0, 1]   # enable Rx1 (voltage0)\
      \ and Rx2 (voltage1)\n            self.sdr.gain_control_mode_chan0 = 'manual'\
      \  # manual or slow_attack\n            self.sdr.gain_control_mode_chan1 = 'manual'\
      \  # manual or slow_attack\n            self.sdr.rx_hardwaregain_chan0 = int(self.rx_gain)\
      \   # must be between -3 and 70\n            self.sdr.rx_hardwaregain_chan1\
      \ = int(self.rx_gain)   # must be between -3 and 70\n            self.sdr._rxadc.set_kernel_buffers_count(1)\
      \  # Default is 4 Rx buffers are stored\n            # Configure Tx\n      \
      \      self.sdr.tx_lo = int(self.LOfreq)   \n            self.sdr.tx_enabled_channels\
      \ = [0, 1]\n            self.sdr.tx_hardwaregain_chan0 = int(self.tx_gain) \
      \  # must be between 0 and -88\n            self.sdr.tx_hardwaregain_chan1 =\
      \ int(self.tx_gain)   # must be between 0 and -88\n            self.sdr.tx_cyclic_buffer\
      \ = True\n            # Create FMCW chirp and transmit\n            T = 32768/(4*self.samp_rate)\
      \      # total time range (sec)\n            t = np.arange(0, T, 1/self.samp_rate)\n\
      \            real_chirp = chirp(t, f0=0, f1=self.samp_rate/4, t1=T, method='linear')\
      \ * (0.9 * 2**11)\n            self.iq_chirp = hilbert(real_chirp)   # convert\
      \ the real chirp into a complex (I and Q) chirp\n            self.iq_chirp =\
      \ np.append(self.iq_chirp, [self.iq_chirp,self.iq_chirp,self.iq_chirp])\n  \
      \          self.sdr.tx([self.iq_chirp, self.iq_chirp])\n            self.initSDR\
      \ = 1\n\n        self.sdr.rx_buffer_size = len(output_items[0])\n        self.sdr.rx_hardwaregain_chan0\
      \ = int(self.rx_gain)\n        self.sdr.rx_hardwaregain_chan1 = int(self.rx_gain)\n\
      \        self.sdr.tx_hardwaregain_chan0 = int(self.tx_gain)\n        self.sdr.tx_hardwaregain_chan1\
      \ = int(self.tx_gain)\n        self.sdr.rx_lo = int(self.LOfreq)\n        self.sdr.tx_lo\
      \ = int(self.LOfreq)\n\n        self.data = self.sdr.rx()\n\n        # data\
      \ and output buffer lengths should be equal, but just in case they are not....\n\
      \        len_data = len(self.data[0])\n        len_output = len(output_items[0])\n\
      \        output_size = min(len_data, len_output)\n        output_items[0][:output_size]\
      \ = self.data[0][:output_size]\n        if len_output > len_data:\n        \
      \    output_items[0][len_data:] = np.ones((len_output - len_data))*1j*1E-9\n\
      \        return len(output_items[0])\n\n    def stop(self):\n        self.sdr.tx_destroy_buffer()\n\
      \        self.sdr.rx_destroy_buffer()\n\n\n"
    affinity: ''
    alias: ''
    comment: 'This python program is for 2Rx/2Tx Rev C Pluto

      Connect SMA cable from Tx to Rx'
    maxoutbuf: '0'
    minoutbuf: '0'
    rx_gain: int(rx_gain)
    samp_rate: int(samp_rate)
    tx_gain: int(tx_gain)
  states:
    _io_cache: ('Pluto Python Control Block', 'blk', [('samp_rate', '1000000.0'),
      ('rx_gain', '20'), ('tx_gain', '-30'), ('LOfreq', '2000000000.0')], [], [('0',
      'complex', 1)], 'arguments to this function show up as parameters in GRC', ['LOfreq',
      'rx_gain', 'samp_rate', 'tx_gain'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [72, 192.0]
    rotation: 0
    state: enabled
- name: qtgui_sink_x_0
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: samp_rate
    comment: 'set FFT size to int(size_fft)

      set update rate to int(samp_rate/(3.14*size_fft))'
    fc: '0'
    fftsize: int(size_fft)
    gui_hint: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    plotconst: 'True'
    plotfreq: 'True'
    plottime: 'True'
    plotwaterfall: 'True'
    rate: int(samp_rate/(3.14*size_fft))
    showports: 'False'
    showrf: 'False'
    type: complex
    wintype: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [344, 184.0]
    rotation: 0
    state: enabled

connections:
- [epy_block_0, '0', qtgui_sink_x_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.10.0
